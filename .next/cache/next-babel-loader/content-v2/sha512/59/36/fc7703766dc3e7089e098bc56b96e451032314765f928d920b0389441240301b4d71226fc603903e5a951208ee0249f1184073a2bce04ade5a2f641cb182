{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar authorFilePath = path.join(__dirname, 'TextFiles/poe.txt'); // this code was used to convert pdf to text file:\n// var filePath = path.join(__dirname, 'TextFiles/poe.pdf')\n// var extract = require('pdf-text-extract')\n// extract(filePath, { splitPages: false }, function (err, text) {\n//   if (err) {\n//     console.dir(err)\n//     return\n//   }\n//   const editedText = text.join('\\n', ' ')\n//   fs.writeFile('TextFiles/poe.txt', editedText, function (err) {\n//     if (err) return console.log(err);})\n// })\n//convert text into word bank\n\nvar file = fs.readFileSync(authorFilePath, 'utf8');\nvar authorArray = file.replace(/\\s+/g, ' ').split(' '); //convert into marchov chain\n\nvar marchov = function marchov(arr) {\n  var obj = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] && arr[i + 1]) {\n      // remove non-letters\n      // future improvements: leave hyphens\n      var word = arr[i].replace(/[\\W\\d_]+/g, '');\n      var nextWord = arr[i + 1].replace(/[\\W\\d_]+/g, ''); // fix case for non-proper nouns\n      // future improvements: add more proper nouns\n\n      if (word !== 'I' && word !== 'God') {\n        word = word.toLowerCase();\n      }\n\n      if (nextWord !== 'I' && nextWord !== 'God') {\n        nextWord = nextWord.toLowerCase();\n      } // add words(s) to Marchov chain\n\n\n      if (obj.hasOwnProperty(word)) {\n        obj[word].push(nextWord); // console.log(word, nextWord)\n      } else {\n        obj[word] = [nextWord];\n      }\n    }\n  }\n\n  return obj;\n};\n\nvar authorMarchovObject = marchov(authorArray);\nmodule.exports = authorMarchovObject;","map":{"version":3,"sources":["/Users/hannahcain/iambic/extractText.js"],"names":["fs","require","path","authorFilePath","join","__dirname","file","readFileSync","authorArray","replace","split","marchov","arr","obj","i","length","word","nextWord","toLowerCase","hasOwnProperty","push","authorMarchovObject","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,cAAc,GAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,EAAqB,mBAArB,CAAvB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,IAAMC,IAAI,GAAGN,EAAE,CAACO,YAAH,CAAgBJ,cAAhB,EAAgC,MAAhC,CAAb;AACA,IAAMK,WAAW,GAAGF,IAAI,CAACG,OAAL,CAAa,MAAb,EAAqB,GAArB,EAA0BC,KAA1B,CAAgC,GAAhC,CAApB,C,CAGA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAUC,GAAV,EAAe;AAC3B,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIF,GAAG,CAACE,CAAD,CAAH,IAAUF,GAAG,CAACE,CAAC,GAAG,CAAL,CAAjB,EAA0B;AAEtB;AACA;AACA,UAAIE,IAAI,GAAGJ,GAAG,CAACE,CAAD,CAAH,CAAOL,OAAP,CAAe,WAAf,EAA4B,EAA5B,CAAX;AACA,UAAIQ,QAAQ,GAAIL,GAAG,CAACE,CAAC,GAAG,CAAL,CAAJ,CAAaL,OAAb,CAAqB,WAArB,EAAkC,EAAlC,CAAf,CALsB,CAOtB;AACA;;AACA,UAAIO,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,KAA7B,EAAoC;AAChCA,QAAAA,IAAI,GAAGA,IAAI,CAACE,WAAL,EAAP;AACH;;AACD,UAAID,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,KAArC,EAA4C;AACxCA,QAAAA,QAAQ,GAAGA,QAAQ,CAACC,WAAT,EAAX;AACH,OAdqB,CAgBtB;;;AACA,UAAIL,GAAG,CAACM,cAAJ,CAAmBH,IAAnB,CAAJ,EAA8B;AAC1BH,QAAAA,GAAG,CAACG,IAAD,CAAH,CAAUI,IAAV,CAAeH,QAAf,EAD0B,CAE1B;AACH,OAHD,MAGO;AACHJ,QAAAA,GAAG,CAACG,IAAD,CAAH,GAAY,CAACC,QAAD,CAAZ;AACH;AACJ;AACJ;;AACD,SAAOJ,GAAP;AACH,CA7BD;;AA8BA,IAAMQ,mBAAmB,GAAGV,OAAO,CAACH,WAAD,CAAnC;AAEAc,MAAM,CAACC,OAAP,GAAiBF,mBAAjB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst authorFilePath = path.join(__dirname, 'TextFiles/poe.txt');\n\n\n// this code was used to convert pdf to text file:\n// var filePath = path.join(__dirname, 'TextFiles/poe.pdf')\n// var extract = require('pdf-text-extract')\n// extract(filePath, { splitPages: false }, function (err, text) {\n//   if (err) {\n//     console.dir(err)\n//     return\n//   }\n//   const editedText = text.join('\\n', ' ')\n//   fs.writeFile('TextFiles/poe.txt', editedText, function (err) {\n//     if (err) return console.log(err);})\n// })\n\n\n//convert text into word bank\nconst file = fs.readFileSync(authorFilePath, 'utf8');\nconst authorArray = file.replace(/\\s+/g, ' ').split(' ');\n\n\n//convert into marchov chain\nconst marchov = function (arr) {\n    let obj = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] && arr[i + 1]) {\n\n            // remove non-letters\n            // future improvements: leave hyphens\n            let word = arr[i].replace(/[\\W\\d_]+/g, '');\n            let nextWord = (arr[i + 1]).replace(/[\\W\\d_]+/g, '');\n\n            // fix case for non-proper nouns\n            // future improvements: add more proper nouns\n            if (word !== 'I' && word !== 'God') {\n                word = word.toLowerCase();\n            }\n            if (nextWord !== 'I' && nextWord !== 'God') {\n                nextWord = nextWord.toLowerCase();\n            }\n\n            // add words(s) to Marchov chain\n            if (obj.hasOwnProperty(word)) {\n                obj[word].push(nextWord);\n                // console.log(word, nextWord)\n            } else {\n                obj[word] = [nextWord];\n            }\n        }\n    }\n    return obj;\n}\nconst authorMarchovObject = marchov(authorArray);\n\nmodule.exports = authorMarchovObject;\n"]},"metadata":{},"sourceType":"script"}