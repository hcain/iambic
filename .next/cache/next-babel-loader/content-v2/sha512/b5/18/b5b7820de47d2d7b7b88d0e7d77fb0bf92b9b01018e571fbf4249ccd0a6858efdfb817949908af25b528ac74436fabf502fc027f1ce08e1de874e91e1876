{"ast":null,"code":"'use strict';\n\nconst dictionaryObject = require('./extractDictionary.js');\n\nconst authorMarchovObject = require('./extractText.js'); // const removePunctuation = (word) => {\n//     return word.replace(/[\\W\\d_]+/g, '')\n// }\n\n\nconst checkIfInDictionary = word => {\n  // console.log(dictionaryObject.hasOwnProperty(word.toUpperCase()))\n  return dictionaryObject.hasOwnProperty(word.toUpperCase());\n};\n\nconst arrayOfAuthorWords = Object.keys(authorMarchovObject);\nconst notInDictionary = [];\nconst authorInDictionary = {};\n\nfor (let i = 0; i < arrayOfAuthorWords.length; i++) {\n  let currentWord = arrayOfAuthorWords[i];\n\n  if (checkIfInDictionary(currentWord)) {\n    authorInDictionary[currentWord] = [];\n\n    for (let j = 0; j < authorMarchovObject[currentWord].length; j++) {\n      const nextWord = authorMarchovObject[currentWord][j]; // console.log(currentWord, nextWord, checkIfInDictionary(nextWord))\n\n      if (checkIfInDictionary(nextWord)) {\n        // console.log(authorInDictionary[currentWord])\n        // if (authorInDictionary.hasOwnProperty(currentWord)) {\n        authorInDictionary[currentWord].push(nextWord); // }\n      }\n    } // if (authorInDictionary[currentWord].length === 0) {\n    //     delete authorInDictionary[currentWord]\n    // }\n\n  } else {\n    notInDictionary.push(currentWord);\n  }\n} // future improvements:\n// use syllable rules to append dictionaryObject with words from notInDictionary\n// use authorMarchovObject\n//include punctuation\n\n\nmodule.exports = authorInDictionary;","map":{"version":3,"sources":["/Users/hannahcain/iambic/matchAuthorAndDictionary.js"],"names":["dictionaryObject","require","authorMarchovObject","checkIfInDictionary","word","hasOwnProperty","toUpperCase","arrayOfAuthorWords","Object","keys","notInDictionary","authorInDictionary","i","length","currentWord","j","nextWord","push","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,wBAAD,CAAhC;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,kBAAD,CAAnC,C,CAEA;AACA;AACA;;;AAEA,MAAME,mBAAmB,GAAIC,IAAD,IAAU;AAClC;AACA,SAAOJ,gBAAgB,CAACK,cAAjB,CAAgCD,IAAI,CAACE,WAAL,EAAhC,CAAP;AACH,CAHD;;AAKA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAA3B;AACI,MAAMQ,eAAe,GAAG,EAAxB;AACA,MAAMC,kBAAkB,GAAG,EAA3B;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,kBAAkB,CAACM,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,MAAIE,WAAW,GAAGP,kBAAkB,CAACK,CAAD,CAApC;;AAEA,MAAIT,mBAAmB,CAACW,WAAD,CAAvB,EAAsC;AACjCH,IAAAA,kBAAkB,CAACG,WAAD,CAAlB,GAAkC,EAAlC;;AACD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEb,mBAAmB,CAACY,WAAD,CAAnB,CAAiCD,MAApD,EAA4DE,CAAC,EAA7D,EAAiE;AAC7D,YAAMC,QAAQ,GAAGd,mBAAmB,CAACY,WAAD,CAAnB,CAAiCC,CAAjC,CAAjB,CAD6D,CAE7D;;AAEA,UAAIZ,mBAAmB,CAACa,QAAD,CAAvB,EAAmC;AAC/B;AACA;AACIL,QAAAA,kBAAkB,CAACG,WAAD,CAAlB,CAAgCG,IAAhC,CAAqCD,QAArC,EAH2B,CAI/B;AACH;AACJ,KAZiC,CAalC;AACA;AACA;;AACH,GAhBD,MAgBO;AACHN,IAAAA,eAAe,CAACO,IAAhB,CAAqBH,WAArB;AACC;AACR,C,CAED;AACA;AACA;AAEA;;;AAEJI,MAAM,CAACC,OAAP,GAAiBR,kBAAjB","sourcesContent":["'use strict';\n\nconst dictionaryObject = require('./extractDictionary.js');\nconst authorMarchovObject = require('./extractText.js');\n\n// const removePunctuation = (word) => {\n//     return word.replace(/[\\W\\d_]+/g, '')\n// }\n\nconst checkIfInDictionary = (word) => {\n    // console.log(dictionaryObject.hasOwnProperty(word.toUpperCase()))\n    return dictionaryObject.hasOwnProperty(word.toUpperCase())\n}\n\nconst arrayOfAuthorWords = Object.keys(authorMarchovObject)\n    const notInDictionary = []\n    const authorInDictionary = {}\n    for (let i = 0; i < arrayOfAuthorWords.length; i++) {\n        let currentWord = arrayOfAuthorWords[i]\n\n        if (checkIfInDictionary(currentWord)) {\n             authorInDictionary[currentWord] = []\n            for (let j = 0; j< authorMarchovObject[currentWord].length; j++) {\n                const nextWord = authorMarchovObject[currentWord][j]\n                // console.log(currentWord, nextWord, checkIfInDictionary(nextWord))\n                \n                if (checkIfInDictionary(nextWord)) {\n                    // console.log(authorInDictionary[currentWord])\n                    // if (authorInDictionary.hasOwnProperty(currentWord)) {\n                        authorInDictionary[currentWord].push(nextWord)\n                    // }\n                }   \n            }\n            // if (authorInDictionary[currentWord].length === 0) {\n            //     delete authorInDictionary[currentWord]\n            // }\n        } else {\n            notInDictionary.push(currentWord)\n            }\n    }\n\n    // future improvements:\n    // use syllable rules to append dictionaryObject with words from notInDictionary\n    // use authorMarchovObject\n\n    //include punctuation\n\nmodule.exports = authorInDictionary;\n"]},"metadata":{},"sourceType":"script"}